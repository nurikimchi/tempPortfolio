{
    "version": "https://jsonfeed.org/version/1",
    "title": "Spencer Sharp",
    "feed_url": "undefined/rss/feed.json",
    "description": "Your blog description",
    "icon": "undefined/favicon.ico",
    "author": {
        "name": "Spencer Sharp"
    },
    "items": [
        {
            "id": "undefined/articles/lazyState-React",
            "content_html": "<h2>The Issue</h2>\n<p>In React, every time state changes, its parent function component is rerun. This can greatly increase loading times--especially if large memory consuming processes are being rerun (e.g. localStorage).</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// if &#x27;checklistItem&#x27; state is changed, the parent functional component: &#x27;App&#x27; will rerun--including heavy memory processes such as &#x27;localStorage&#x27;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>checklistItem<span class=\"token punctuation\">,</span> setChecklistItems<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span>\n        <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;checklistItem&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2>The Fix</h2>\n<p>The fix is simple: make state a function. By doing so, we successfully make state run once instead on every state change and initialize state to be lazy--hence lazy state initialization.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\"><span class=\"token maybe-class-name\">App</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// By making &#x27;checklistItem&#x27; state an arrow function, we successfully implement lazy state initialization!</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>checklistItem<span class=\"token punctuation\">,</span> setChecklistItems<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;checklistItem&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
            "url": "undefined/articles/lazyState-React",
            "title": "Decrease Loading Time in React with Lazy State Initialization",
            "date_modified": "2022-07-07T00:00:00.000Z",
            "author": {
                "name": "Spencer Sharp"
            }
        },
        {
            "id": "undefined/articles/localStorage-React",
            "content_html": "<h2>What is localStorage?</h2>\n<p>localStorage is a property of JavaScript&#x27;s window interface\n(an object that represents a browser window with DOM elements).\nIt allows JavaScript websites to save and retrieve key/value pairs\nafter a browser window is closed. It has several methods including\nsetItem(), getItem(), and removeItem() that manage key/value pairs\nmade through localStorage. These pairs can only be strings. Other data types\ncan be managed by localStorage if converted to strings through JSON methods\n(more on that later).</p>\n<h3>setItem()</h3>\n<p>This method creates a new key/value pair that can later be accessed by getItem() and removeItem() after the browser window is closed.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// makes a key: &#x27;myNewKey&#x27; with its value &#x27;myNewValue&#x27;</span>\n<span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keyItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;myNewKey&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&#x27;myNewValue&#x27;</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3>getItem()</h3>\n<p>This method accesses the value set by setItem() through one parameter, a key value.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// @returns {string} &#x27;myNewValue&#x27;</span>\n<span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;myNewKey&#x27;</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3>removeItem()</h3>\n<p>Like getItem(), removeItem() only needs one parameter, the key value, to remove the key and its value.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// removes &#x27;myNewKey&#x27; and its value &#x27;myNewValue&#x27;</span>\n<span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;myNewKey&#x27;</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2>Use Other Data Types in localStorage Through JSON Methods</h2>\n<h3>JSON.stringify()</h3>\n<p>Converts any data type into a string. Since localStorage only accepts parameters as strings so you must convert any other data type to a string before passing it as a localStorage parameter.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myNewObjectValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    name <span class=\"token string\">&#x27;Nuri Kim&#x27;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">14</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// sets the string version of &#x27;myNewObjectValue&#x27; to the key string value &#x27;myNewObjectValue&#x27; to localStorage</span>\n<span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;myNewObjectKey&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>myNewObjectValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3>JSON.parse()</h3>\n<p>Converts a stringified value to its original data type. When string data is saved into localStorage, its value can be retrieved and returned to its original data type through JSON.parse()</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// @returns {object} &#x27;myNewObjectValue&#x27; from a string into its original type</span>\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;nevObjectKey&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2>localStorage and React</h2>\n<h3>useEffect()</h3>\n<p>useEffect is a hook that handles events outside of React including API/database calls, subscriptions (e.g. WebSocket), and <b>localStorage</b>. Combined with a dependency array, you can add a key/value pair into localStorage after a certain value within that array has changed. The array is the second parameter in useEffect(). If an array contains a variable, useEffect() will run everytime that variable has changed. If the second parameter/array is empty, useEffect() will run once after its parent component has finished loading.\nExample: In our checklist app, we want to implement a feature where a user&#x27;s added items will not disappear after he/she refreshes or closes the browser window. The following code successfully implements this feature to our App component if added to a working codebase:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\"><span class=\"token maybe-class-name\">App</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>checklistItem<span class=\"token punctuation\">,</span> setChecklistItems<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span>\n        <span class=\"token comment\">// if there is no &#x27;checklistItem&#x27; in localStorage, &#x27;checklistItem&#x27; of useState is an empty array</span>\n        <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;checklistItem&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// after a checklistItem is added or changed (see dependency array), set the variable &#x27;checklistItem&#x27; as a key with its value being the stringified &#x27;checklistItem&#x27;</span>\n    <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;checklistItem&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>checklistItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>checklistItem<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2>Special Thanks</h2>\n<ul><li><p>Scrimba for their <a href=\"https://scrimba.com/learn/learnreact\">awesome React course\n</a></p></li></ul>",
            "url": "undefined/articles/localStorage-React",
            "title": "Save and Retrieve Data After A Closed Window In React With localStorage",
            "date_modified": "2022-07-06T00:00:00.000Z",
            "author": {
                "name": "Spencer Sharp"
            }
        }
    ]
}