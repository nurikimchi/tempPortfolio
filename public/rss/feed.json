{
    "version": "https://jsonfeed.org/version/1",
    "title": "Nuri Kim",
    "feed_url": "undefined/rss/feed.json",
    "description": "Your blog description",
    "icon": "undefined/favicon.ico",
    "author": {
        "name": "Nuri Kim"
    },
    "items": [
        {
            "id": "undefined/articles/coorAnim-AFrame",
            "content_html": "<blockquote>\n<p>“Great events make me quiet and calm; it is only trifles that irritate my nerves.”</p>\n</blockquote>\n<h2>Table of Contents</h2>\n<ol>\n<li>The Problem</li>\n<li>Positional, rotational, or scaling animations of A-Frame</li>\n<li>gLTF model movement</li>\n<li>Discovered solution (<a href=\"#discovered-solution\">jump</a>)</li>\n<li>Concluding suggestions</li>\n</ol>\n<h2>The Problem</h2>\n<p>If you tried searching for A-Frame animations on the web, you’d probably see articles and documentation exclusively discussing built-in animation properties, gLTF model animations, and a library called <a href=\"https://www.npmjs.com/package/aframe-animation-timeline-component\">aframe-animation-timeline-component</a> aiming to outline and execute sequences of grouped and individual animations.</p>\n<p>You’re probably unable to find a fleshed-out solution connecting built-in rotation, position, scaling, or visibility animations of an <code>&lt;a-entity&gt;</code> to a gLTF model’s clip animations. So how do you connect and run them together, simultaneously?</p>\n<p>In this article, I’ll be showing how—with some custom JavaScript functions—you can have any gLTF model coordinate its clip animations with its positional, rotational, or size-changing animation attributes provided by A-Frame.</p>\n<h2>Positional, rotational, or scaling animations of A-Frame</h2>\n<p>Let’s establish some common ground, A-Frame has built-in values for its <code>animation</code> attribute. Examine each code snippet if you’re unsure changing an <code>&lt;a-entity&gt;</code>’s positional or rotational values of its animation attribute.</p>\n<p>These just cover position and rotation component values but similar structure applies for scale. Visibility’s <code>to</code> and <code>from</code> sister attributes are boolean values.</p>\n<h3>Position:</h3>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-box</span> <span class=\"token attr-name\">position</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>-1 1.6 -5<span class=\"token punctuation\">&quot;</span></span> <span class=\"token attr-name\">animation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>property: position; to: 1 8 -10; dur: 2000; easing: linear; loop: true<span class=\"token punctuation\">&quot;</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>tomato<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-box</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<h3>Rotation:</h3>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-box</span> <span class=\"token attr-name\">rotation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>0 0 0<span class=\"token punctuation\">&quot;</span></span> <span class=\"token attr-name\">animation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>property: rotation; to: 0 360 0; loop: true; dur: 10000” color=<span class=\"token punctuation\">&quot;</span></span><span class=\"token attr-name\">blue&quot;</span><span class=\"token punctuation\">&gt;</span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-box</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p><em>Code snippets courtesy of A-Frame&#x27;s <a href=\"https://aframe.io/docs/1.5.0/components/animation.html\">documentation</a>.</em></p>\n<h2>gLTF model movement</h2>\n<p>WebVR developers can import gLTF models from third-party websites like <a href=\"https://sketchfab.com\">Sketchfab</a> into their visualizations.</p>\n<p>For few free and many paid models, gLTF models can have several clip animations. Search your third-party CAD model provider for a list.</p>\n<p>Once you initially downloaded your model as a gLTF and <a href=\"https://products.groupdocs.app/conversion/gltf-to-obj\">converted</a> into an usable .glb file, place it in your project.</p>\n<p>Once your server shows a static entity, define its attribute as <code>animation-mixer=“clip: {}”</code>.</p>\n<pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-entity</span>\n    <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>...<span class=\"token punctuation\">&quot;</span></span>\n    <span class=\"token attr-name\">gltf-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>./assets/adultGiraffeTextured.glb<span class=\"token punctuation\">&quot;</span></span>\n    <span class=\"token attr-name\">position</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>...<span class=\"token punctuation\">&quot;</span></span>\n    <span class=\"token attr-name\">rotation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>...<span class=\"token punctuation\">&quot;</span></span>\n    <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>...<span class=\"token punctuation\">&quot;</span></span>\n    <span class=\"token attr-name\">animation-mixer</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>clip: Rest<span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-entity</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>Awesome, so we now understand how to implement built-in A-Frame animations and gLTF clip animations separately! Now, to synchronizing them together!</p>\n<p><h2 id=\"discovered-solution\">Discovered solution</h2>\nSeveral animation attributes, denoted by <code>animation</code>, can simultaneously be assigned to a parent entity. Simply append two underscores and a string after: <code>animation__{appear}</code>.</p>\n<pre class=\"language-html\"><code class=\"language-html\"> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a-entity</span>\n  <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>...<span class=\"token punctuation\">&quot;</span></span>\n  <span class=\"token attr-name\">gltf-model</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>./assets/adultGiraffeTextured.glb<span class=\"token punctuation\">&quot;</span></span>\n  <span class=\"token attr-name\">position</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>...<span class=\"token punctuation\">&quot;</span></span>\n  <span class=\"token attr-name\">rotation</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>...<span class=\"token punctuation\">&quot;</span></span> \n  <span class=\"token attr-name\">scale</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>...<span class=\"token punctuation\">&quot;</span></span>\n  <span class=\"token attr-name\">animation__1_0</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>\n      property: position;\n      from: ...;\n      to: ...;\n      dur: ...;\n  <span class=\"token punctuation\">&quot;</span></span>\n  <span class=\"token attr-name\">animation__1a</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>\n      startEvents: animationcomplete__1_0, animationcomplete__6a;\n      property: ...;\n      from: ...;\n      to: ...;\n      autoplay: ...;\n      dur: ...;\n  <span class=\"token punctuation\">&quot;</span></span>\n  <span class=\"token attr-name\">animation__2a</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">&quot;</span>\n      startEvents: animationcomplete__1_0, animationcomplete__6a;\n      property: position;\n      from: ...;\n      to: ...;\n      autoplay: ...;\n      dur: ...;\n  <span class=\"token punctuation\">&quot;</span></span><span class=\"token punctuation\">&gt;</span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a-entity</span><span class=\"token punctuation\">&gt;</span></span>\n</code></pre>\n<p>Make <code>a-entity</code>’s usable JavaScript objects, select and declare it as a variable. Ensure all the following JavaScript functions are wrapped in a <code>&lt;script&gt;</code> tag and placed <strong>after</strong> your A-Frame.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> giraffeA1 <span class=\"token operator\">=</span> <span class=\"token dom variable\">document</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;#giraffe-A1&#x27;</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Combine this with A-Frame’s built-in <code>animationbegin</code> event and JavaScript functions can detect when one or several animations begin. We will be leveraging this default, emitted <code>animationbegin</code> event as our switch cases.</p>\n<pre class=\"language-js\"><code class=\"language-js\">giraffeA1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;animationbegin&#x27;</span><span class=\"token punctuation\">,</span> animationCorresponder<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>Console log <code>event.detail.name</code> in a separate event listener with the same first (<code>type</code>) argument. Open the console and see that each animation name is logs with its respective start.</p>\n<pre class=\"language-js\"><code class=\"language-js\">giraffeA1<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;animationbegin&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token property-access\">detail</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<details><summary>Why does <code>animCorr</code> not explicitly pass the <code>event</code> argument?</summary><blockquote>\n<p><code>animCorr</code> is automatically passed and supplemented with the <code>event</code> object by JavaScript’s built-in event system.</p>\n</blockquote></details>\n<p>The <code>addEventListener</code> detects <code>animation__1</code> emitted the string “animationbegin” and subsequently calls the <code>animCorr</code> function. The <code>animCorr</code> function traces the emitted string back to its original signaler—<code>animation__1</code>—and sets the entity’s <code>’animation-mixer’, {‘clip’: ‘Drink’}</code>.</p>\n<p>Thus, you’ll see the model almost simultaneously move and perform its clip animation.</p>\n<h2>Concluding suggestions</h2>\n<p>Instead of working with strings of HTML elements, feel free to programmatically declare A-Frame entities via <code>AFRAME.registerComponent</code>; they offer more flexibility and better scalability.</p>",
            "url": "undefined/articles/coorAnim-AFrame",
            "title": "Coordinating gLTF motion with A-Frame animations",
            "summary": "In A-Frame, developers can easily animate an entity's rotation and position. However, there are no built-in solutions for adding clip-animations. In this article, I propose a solution to coordinate a CAD model's clip animations with its A-Frame counterpart.",
            "date_modified": "2024-03-18T00:00:00.000Z",
            "author": {
                "name": "Nuri Kim"
            }
        },
        {
            "id": "undefined/articles/lazyState-React",
            "content_html": "<h2>The Issue</h2>\n<p>In React, every time state changes, its parent function component is rerun. This can greatly increase loading times--especially if large memory consuming processes are being rerun (e.g. localStorage).</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\"><span class=\"token maybe-class-name\">App</span></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// if &#x27;checklistItem&#x27; state is changed, the parent functional component: &#x27;App&#x27; will rerun--including heavy memory processes such as &#x27;localStorage&#x27;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>checklistItem<span class=\"token punctuation\">,</span> setChecklistItems<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span>\n        <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;checklistItem&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2>The Fix</h2>\n<p>The fix is simple: make state a function. By doing so, we successfully make state run once instead on every state change and initialize state to be lazy--hence lazy state initialization.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\"><span class=\"token maybe-class-name\">App</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// By making &#x27;checklistItem&#x27; state an arrow function, we successfully implement lazy state initialization!</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>checklistItem<span class=\"token punctuation\">,</span> setChecklistItems<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span>\n        <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;checklistItem&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>",
            "url": "undefined/articles/lazyState-React",
            "title": "Decrease Loading Time in React with Lazy State Initialization",
            "summary": "In React, every time state changes, its parent function component is rerun. This can greatly increase loading times--especially if large memory consuming processes are being rerun (e.g. localStorage).",
            "date_modified": "2022-07-07T00:00:00.000Z",
            "author": {
                "name": "Nuri Kim"
            }
        },
        {
            "id": "undefined/articles/localStorage-React",
            "content_html": "<h2>What is localStorage?</h2>\n<p>localStorage is a property of JavaScript&#x27;s window interface\n(an object that represents a browser window with DOM elements).\nIt allows JavaScript websites to save and retrieve key/value pairs\nafter a browser window is closed. It has several methods including\nsetItem(), getItem(), and removeItem() that manage key/value pairs\nmade through localStorage. These pairs can only be strings. Other data types\ncan be managed by localStorage if converted to strings through JSON methods\n(more on that later).</p>\n<h3>setItem()</h3>\n<p>This method creates a new key/value pair that can later be accessed by getItem() and removeItem() after the browser window is closed.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// makes a key: &#x27;myNewKey&#x27; with its value &#x27;myNewValue&#x27;</span>\n<span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">keyItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;myNewKey&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token string\">&#x27;myNewValue&#x27;</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3>getItem()</h3>\n<p>This method accesses the value set by setItem() through one parameter, a key value.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// @returns {string} &#x27;myNewValue&#x27;</span>\n<span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;myNewKey&#x27;</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3>removeItem()</h3>\n<p>Like getItem(), removeItem() only needs one parameter, the key value, to remove the key and its value.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// removes &#x27;myNewKey&#x27; and its value &#x27;myNewValue&#x27;</span>\n<span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">removeItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;myNewKey&#x27;</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2>Use Other Data Types in localStorage Through JSON Methods</h2>\n<h3>JSON.stringify()</h3>\n<p>Converts any data type into a string. Since localStorage only accepts parameters as strings so you must convert any other data type to a string before passing it as a localStorage parameter.</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myNewObjectValue <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token literal-property property\">id</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n    name <span class=\"token string\">&#x27;Nuri Kim&#x27;</span><span class=\"token punctuation\">,</span>\n    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">14</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// sets the string version of &#x27;myNewObjectValue&#x27; to the key string value &#x27;myNewObjectValue&#x27; to localStorage</span>\n<span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;myNewObjectKey&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>myNewObjectValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3>JSON.parse()</h3>\n<p>Converts a stringified value to its original data type. When string data is saved into localStorage, its value can be retrieved and returned to its original data type through JSON.parse()</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// @returns {object} &#x27;myNewObjectValue&#x27; from a string into its original type</span>\n<span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;nevObjectKey&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2>localStorage and React</h2>\n<h3>useEffect()</h3>\n<p>useEffect is a hook that handles events outside of React including API/database calls, subscriptions (e.g. WebSocket), and <b>localStorage</b>. Combined with a dependency array, you can add a key/value pair into localStorage after a certain value within that array has changed. The array is the second parameter in useEffect(). If an array contains a variable, useEffect() will run everytime that variable has changed. If the second parameter/array is empty, useEffect() will run once after its parent component has finished loading.\nExample: In our checklist app, we want to implement a feature where a user&#x27;s added items will not disappear after he/she refreshes or closes the browser window. The following code successfully implements this feature to our App component if added to a working codebase:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token function\"><span class=\"token maybe-class-name\">App</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>checklistItem<span class=\"token punctuation\">,</span> setChecklistItems<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useState</span><span class=\"token punctuation\">(</span>\n        <span class=\"token comment\">// if there is no &#x27;checklistItem&#x27; in localStorage, &#x27;checklistItem&#x27; of useState is an empty array</span>\n        <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">parse</span><span class=\"token punctuation\">(</span><span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;checklistItem&#x27;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\">// after a checklistItem is added or changed (see dependency array), set the variable &#x27;checklistItem&#x27; as a key with its value being the stringified &#x27;checklistItem&#x27;</span>\n    <span class=\"token maybe-class-name\">React</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=&gt;</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token dom variable\">localStorage</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">&#x27;checklistItem&#x27;</span><span class=\"token punctuation\">,</span> <span class=\"token known-class-name class-name\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">stringify</span><span class=\"token punctuation\">(</span>checklistItem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>checklistItem<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2>Special Thanks</h2>\n<ul><li><p>Scrimba for their <a href=\"https://scrimba.com/learn/learnreact\">awesome React course\n</a></p></li></ul>",
            "url": "undefined/articles/localStorage-React",
            "title": "Save and Retrieve Data After A Closed Window In React With localStorage",
            "summary": "localStorage is a property of JavaScript's window interface (an object that represents a browser window with DOM elements).",
            "date_modified": "2022-07-06T00:00:00.000Z",
            "author": {
                "name": "Nuri Kim"
            }
        }
    ]
}